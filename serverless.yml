service:
  name: codesandbox-packager
  runtime: nodejs6.10

custom:
  s3Bucket: ${opt:stage}.packager.packages
  region: eu-west-1

provider:
  name: aws
  runtime: nodejs6.10
  memorySize: 1536
  timeout: 300
  region: ${self:custom.region}

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:*"
        - "s3:DeleteObject"
      Resource: "arn:aws:s3:::${self:custom.s3Bucket}/*"
    - Effect: 'Allow'
      Action:
        - 'lambda:InvokeFunction'
      Resource: "*"

  environment:
    IN_LAMBDA: true
    SERVERLESS_STAGE: ${opt:stage}
    BUCKET_NAME: ${self:custom.s3Bucket}

plugins:
  - serverless-plugin-typescript

# needs more granular excluding in production as only the serverless provider npm
# package should be excluded (and not the whole node_modules directory)
package:
  exclude:
    - .gitignore
    - .git/**
    - dist/**

functions:
  api:
    handler: functions/api/index.http
    package:
      exclude:
        - functions/**
        - manifests/**
        - packages/**
      include:
        - functions/api/**
    events:
      - http:
          path: /packages/{packages}
          method: get
          cors: true
          request:
            parameters:
              paths:
                id: true

  packager:
    handler: functions/packager/index.call
    package:
      exclude:
        - functions/**
        - manifests/**
        - packages/**
      include:
        - functions/packager/**

  # NOTE: the following uses an "event" event (pubSub event in this case).
  # Please create the corresponding resources in the Google Cloud
  # before deploying this service through Serverless

  #second:
  #  handler: event
  #  events:
  #    - event:
  #        eventType: providers/cloud.pubsub/eventTypes/topic.publish
  #        resource: projects/*/topics/my-topic

# you can define resources, templates etc. the same way you would in a
# Google Cloud deployment configuration
resources:
  Resources:
    PackageS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3Bucket}

    PackageS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: PackageS3Bucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
              - s3:GetObject
              Resource: arn:aws:s3:::${self:custom.s3Bucket}/*

    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
          - Id: codesandbox-packager-api
            DomainName:
              Fn::Join:
                - ''
                - - Ref: ApiGatewayRestApi
                  - '.execute-api.${self:custom.region}.amazonaws.com'
            CustomOriginConfig:
              HTTPPort: '80'
              HTTPSPort: '443'
              OriginProtocolPolicy: match-viewer
            OriginPath:
              - "/${opt:stage}"
          Enabled: true
          Comment: Packages API
          PriceClass: PriceClass_All
          DefaultCacheBehavior:
            AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            CachedMethods:
            - HEAD
            - GET
            ForwardedValues:
              QueryString: true
              Headers: []
              Cookies:
                Forward: none
            MinTTL: '0'
            TargetOriginId: codesandbox-packager-api
            ViewerProtocolPolicy: https-only
          CustomErrorResponses: []

#  imports:
#    - path: my_template.jinja
